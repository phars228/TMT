import os
import sqlite3
import logging
from flask import Flask, request, jsonify
from telegram import Bot, Update
from telegram.ext import CommandHandler, MessageHandler, Application as Dispatcher
from telegram.ext.filters import *
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()

app = Flask(__name__)
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

bot = Bot(token=TOKEN)

def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('tasks.db')
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with get_db_connection() as conn:
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                username TEXT UNIQUE NOT NULL,
                chat_id INTEGER NOT NULL,
                first_name TEXT,
                last_name TEXT
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS teams (
                id INTEGER PRIMARY KEY,
                name TEXT UNIQUE NOT NULL,
                admin_id INTEGER NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (admin_id) REFERENCES users(id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS team_members (
                team_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (team_id, user_id),
                FOREIGN KEY (team_id) REFERENCES teams(id),
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tasks (
                id INTEGER PRIMARY KEY,
                title TEXT NOT NULL,
                description TEXT,
                status TEXT DEFAULT 'pending' CHECK(status IN ('pending', 'in_progress', 'completed')),
                priority INTEGER DEFAULT 1,
                team_id INTEGER NOT NULL,
                assignee_id INTEGER NOT NULL,
                created_by INTEGER NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (team_id) REFERENCES teams(id),
                FOREIGN KEY (assignee_id) REFERENCES users(id),
                FOREIGN KEY (created_by) REFERENCES users(id)
            )
        ''')
        
        conn.commit()

init_db()

def register_user(user):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with get_db_connection() as conn:
        try:
            conn.execute(
                '''INSERT OR REPLACE INTO users 
                (id, username, chat_id, first_name, last_name) 
                VALUES (?, ?, ?, ?, ?)''',
                (user.id, user.username, user.id, user.first_name, user.last_name)
            )
            conn.commit()
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

def is_user_admin(user_id, team_id=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∫–æ–º–∞–Ω–¥—ã"""
    with get_db_connection() as conn:
        cursor = conn.cursor()
        query = '''
            SELECT 1 FROM teams 
            WHERE admin_id = ? 
        '''
        params = [user_id]
        
        if team_id:
            query += ' AND id = ?'
            params.append(team_id)
            
        cursor.execute(query, params)
        return cursor.fetchone() is not None

def start(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    register_user(user)
    
    help_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö.

üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/create_team –ù–∞–∑–≤–∞–Ω–∏–µ - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
/my_teams - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã
/add @username - –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É
/task @username –ù–∞–∑–≤–∞–Ω–∏–µ - –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É
/tasks - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏

üîπ –î–ª—è –∞–¥–º–∏–Ω–æ–≤:
/remove @username - –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
/delete_team - –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
"""
    update.message.reply_text(help_text)

def create_team(update: Update, context):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    user = update.effective_user
    args = context.args
    
    if not args:
        update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /create_team –ù–∞–∑–≤–∞–Ω–∏–µ–ö–æ–º–∞–Ω–¥—ã")
        return
    
    team_name = ' '.join(args).strip()
    if len(team_name) > 50:
        update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    with get_db_connection() as conn:
        try:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã
            cursor.execute('SELECT 1 FROM teams WHERE admin_id = ?', (user.id,))
            if cursor.fetchone():
                update.message.reply_text("‚ùå –í—ã —É–∂–µ –∞–¥–º–∏–Ω –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            cursor.execute(
                'INSERT INTO teams (name, admin_id) VALUES (?, ?)',
                (team_name, user.id)
            )
            team_id = cursor.lastrowid
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É
            cursor.execute(
                'INSERT INTO team_members (team_id, user_id) VALUES (?, ?)',
                (team_id, user.id)
            )
            
            conn.commit()
            update.message.reply_text(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{team_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            
        except sqlite3.IntegrityError:
            update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except sqlite3.Error as e:
            conn.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

def add_member(update: Update, context):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É"""
    user = update.effective_user
    args = context.args
    
    if not args:
        update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add @username")
        return
    
    username = args[0].replace('@', '').strip().lower()
    if not username:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞")
        return
    
    with get_db_connection() as conn:
        try:
            cursor = conn.cursor()
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
            cursor.execute('''
                SELECT t.id FROM teams t
                WHERE t.admin_id = ?
                LIMIT 1
            ''', (user.id,))
            team = cursor.fetchone()
            
            if not team:
                update.message.reply_text("‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã")
                return
            
            team_id = team['id']
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            cursor.execute('SELECT id FROM users WHERE username = ?', (username,))
            target_user = cursor.fetchone()
            
            if not target_user:
                update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
                return
                
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É
            try:
                cursor.execute('''
                    INSERT INTO team_members (team_id, user_id)
                    VALUES (?, ?)
                ''', (team_id, target_user['id']))
                conn.commit()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
                bot.send_message(
                    chat_id=target_user['id'],
                    text=f"üéâ –í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É!\n"
                         f"–ö–æ–º–∞–Ω–¥–∞: {team_id}\n"
                         f"–ê–¥–º–∏–Ω: @{user.username}"
                )
                
                update.message.reply_text(f"‚úÖ @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É!")
                
            except sqlite3.IntegrityError:
                update.message.reply_text(f"‚ùå @{username} —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ")
                
        except sqlite3.Error as e:
            conn.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
            update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞")

def assign_task(update: Update, context):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    user = update.effective_user
    args = context.args
    
    if len(args) < 2:
        update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /task @username –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        return
    
    assignee_username = args[0].replace('@', '').strip().lower()
    task_title = ' '.join(args[1:]).strip()
    
    if len(task_title) > 100:
        update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    with get_db_connection() as conn:
        try:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
            cursor.execute('''
                SELECT t.id FROM teams t
                JOIN team_members tm ON t.id = tm.team_id
                WHERE tm.user_id = ?
                LIMIT 1
            ''', (user.id,))
            team = cursor.fetchone()
            
            if not team:
                update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ")
                return
                
            team_id = team['id']
            
            # –ù–∞—Ö–æ–¥–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            cursor.execute('''
                SELECT u.id, u.chat_id FROM users u
                JOIN team_members tm ON u.id = tm.user_id
                WHERE u.username = ? AND tm.team_id = ?
                LIMIT 1
            ''', (assignee_username, team_id))
            assignee = cursor.fetchone()
            
            if not assignee:
                update.message.reply_text(f"‚ùå @{assignee_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ")
                return
                
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            cursor.execute('''
                INSERT INTO tasks (title, team_id, assignee_id, created_by)
                VALUES (?, ?, ?, ?)
            ''', (task_title, team_id, assignee['id'], user.id))
            task_id = cursor.lastrowid
            
            conn.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
            bot.send_message(
                chat_id=assignee['chat_id'],
                text=f"üìå –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ #{task_id}\n"
                     f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task_title}\n"
                     f"–û—Ç: @{user.username}\n"
                     f"/complete_{task_id} - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"
            )
            
            update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –¥–ª—è @{assignee_username} —Å–æ–∑–¥–∞–Ω–∞!")
            
        except sqlite3.Error as e:
            conn.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏")

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram"""
    try:
        json_data = request.get_json()
        if not json_data:
            logger.error("–ü—É—Å—Ç–æ–π JSON –≤ –≤–µ–±—Ö—É–∫–µ")
            return jsonify({"error": "Invalid JSON"}), 400
            
        update = Update.de_json(json_data, bot)
        dispatcher = Dispatcher(bot, None, workers=0)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        dispatcher.add_handler(CommandHandler("start", start))
        dispatcher.add_handler(CommandHandler("create_team", create_team))
        dispatcher.add_handler(CommandHandler("add", add_member))
        dispatcher.add_handler(CommandHandler("task", assign_task))
        
        dispatcher.process_update(update)
        return jsonify({"status": "ok"})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {e}")
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)